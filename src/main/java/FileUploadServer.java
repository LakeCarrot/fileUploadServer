/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fileuploadserver;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;
import fileuploadtest.Fileuploadtest.Request;
import fileuploadtest.Fileuploadtest.Response;
import fileuploadtest.FileUploadTestGrpc;
import java.io.IOException;
import java.util.logging.Logger;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;

public class FileUploadServer {
	private static final Logger logger = Logger.getLogger(FileUploadServer.class.getName());

  private Server server;

  private void start() throws IOException {
    /* The port on which the server should run */
    int port = 50052;
    server = ServerBuilder.forPort(port)
        .addService(new FileUploadTestImpl())
        .build()
        .start();
    logger.info("File Upload Test Server started, listening on " + port);
    Runtime.getRuntime().addShutdownHook(new Thread() {
      @Override
      public void run() {
        // Use stderr here since the logger may have been reset by its JVM shutdown hook.
        System.err.println("*** shutting down gRPC server since JVM is shutting down");
        FileUploadServer.this.stop();
        System.err.println("*** server shut down");
      }
    });
  }

  private void stop() {
    if (server != null) {
      server.shutdown();
    }
  }

  /**
   * Await termination on the main thread since the grpc library uses daemon threads.
   */
  private void blockUntilShutdown() throws InterruptedException {
    if (server != null) {
      server.awaitTermination();
    }
  }

  /**
   * Main launches the server from the command line.
   */
  public static void main(String[] args) throws IOException, InterruptedException {
    final FileUploadServer server = new FileUploadServer();
    server.start();
    server.blockUntilShutdown();
  }

	static class FileUploadTestImpl extends FileUploadTestGrpc.FileUploadTestImplBase {
		private BufferedOutputStream mBufferedOutputStream = null;
		private String mMessage = "";

		@Override
		public StreamObserver<Request> upload(final StreamObserver<Response> responseObserver) {
			return new StreamObserver<Request>() {
				@Override
				public void onNext(Request request) {
					byte[] data = request.getData().toByteArray();
					String name = request.getName();
    			logger.info("receive a message!");
					try {
						if(mBufferedOutputStream == null) {
							mBufferedOutputStream = new BufferedOutputStream(new FileOutputStream("receive_" + name));
						}
						mBufferedOutputStream.write(data);
						mBufferedOutputStream.flush();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				@Override
				public void onError(Throwable t) {
				}

				@Override
				public void onCompleted() {
					responseObserver.onNext(Response.newBuilder().setMessage(mMessage).build());
					responseObserver.onCompleted();
					if(mBufferedOutputStream != null) {
						try {
							mBufferedOutputStream.close();
						} catch (IOException e) {
							e.printStackTrace();
						} finally {
							mBufferedOutputStream = null;
						}
					}
				}
			};
		}
	}
}
